#!/usr/bin/env bash

#
# crosware
#  driver script to bootstrap and install software
#

#
# we'll use these everywhere
#
export cwname="crosware"
if [[ ${0} =~ ^/dev/fd/ ]] ; then
  scriptname="${cwname}"
else
  scriptname="$(basename ${0})"
fi

function cwscriptecho() {
  local scriptmesg=""
  if [ ! -z "${@}" ] ; then
    scriptmesg="${1}"
  fi
  echo -e "${scriptname}: ${scriptmesg}"
}

function cwfailexit() {
  local failmesg="error"
  if [ ! -z "${@}" ] ; then
    failmesg="${1}"
  fi
  cwscriptecho "${failmesg}"
  exit 1
}

#
# shell feature and usage check
#

# make sure we're using bash and not sourced
if [ -z "${BASH_SOURCE}" -o "${0}" != "${BASH_SOURCE}" ] ; then
  echo "please execute this script instead of sourcing it"
  if [ "${0}" != "${BASH_SOURCE}" ] ; then
    return
  fi
  exit 1
fi

# check that we're using bash 4
if [ ${BASH_VERSINFO[0]} -lt 4 ] ; then
  cwfailexit "please make sure GNU Bash 4+ is in use"
fi

# exit early, exit often
set -eu

#
# prereqs
#
# XXX - curl, sha256sum, ... ? what else? check for tls/ssl support?
#       xz/xzcat? bzip2/bzcat? gzip?
#
prereqs=( 'bzip2' 'curl' 'gzip' 'nproc' 'sha256sum' 'tar' )
for prereq in ${prereqs[@]} ; do
  hash "${prereq}" >/dev/null 2>&1 || {
    cwfailexit "${prereq} not found"
  }
done

#
# script options/commands/variables
#
: ${cwurl:="https://github.com/ryanwoodsmall/${cwname}.git"}
: ${cworigin:="origin"}
: ${cwbranch:="master"}
declare -A cwcmds
cwcmds["help"]="show help"
cwcmds["bootstrap"]="bootstrap ${cwname}"
cwcmds["env"]="dump source-/eval-able ${cwname} etc/profile"
cwcmds["profile"]="show .profile addition"
cwcmds["list-recipes"]="list build recipes"
cwcmds["list-recipe-files"]="list recipes with their source file"
cwcmds["list-recipe-versions"]="list recipes with version number"
cwcmds["list-recipe-reqs"]="list recipes their requirements"
cwcmds["install"]="attempt to build/install a package from a known recipe"
cwcmds["update"]="attempt to update existing install of ${cwname}"
cwcmds["list-installed"]="list installed recipes"
cwcmds["uninstall"]="uninstall some packages"
cwcmds["set"]="run 'set' to show full ${cwname} environment"
cwcmds["list-available"]="list available recipes which are not installed"
cwcmds["list-upgradable"]="list installed packages with available upgrades"
cwcmds["list-funcs"]="list ${cwname} shell functions"
cwcmds["run-func"]="run ${cwname} shell function"
cwcmds["show-func"]="show the given function name"
cwcmds["show-env"]="run 'env' to show ${cwname} environment"
cwcmds["upgrade"]="uninstall then install a recipe"
cwcmds["upgrade-all"]="upgrade all packages with different recipe versions"
cwcmds["show-karch"]="show kernel architecture"
cwcmds["show-uarch"]="show userspace architecture"
cwcmds["show-arch"]="show kernel and userspace architecture"
cwcmds["check-installed"]="given a package name, check if it's installed"
# XXX - does this need to be an associative array to generate case ..) statements?
cwcmdaliases=( 'list-upgradeable' )
cwcmdlist=( $(echo ${!cwcmds[@]} ${cwcmdaliases[@]} | tr ' ' '\n' | sort | xargs echo) )

#
# common commands
#
# extract commands
export cwuntar="tar -xf"
export cwuntbz2="tar -jxf"
export cwuntgz="tar -zxf"
export cwuntxz="tar -Jxf"
export cwunzip="unzip -o"

#
# common opts
#
# curl
#   -f for fail on http error
#   -k accept insecure certs
#   -L follow redirects
#   -s for silent downloads?
export cwcurlopts="-f -k -L -s"
# make
#   -j # of parallel jobs
: ${cwmakejobs:="$(($(nproc)+1))"}
export cwmakejobs

#
# where we live
#
# XXX - default to /usr/local/crosware but allow override (that may or may not work)
: ${cwtop:="/usr/local/${cwname}"}
export cwtop
export cwbin="${cwtop}/bin"
export cwbuild="${cwtop}/builds"
export cwdl="${cwtop}/downloads"
export cwetc="${cwtop}/etc"
export cwrecipe="${cwtop}/recipes"
export cwetcprofile="${cwetc}/profile"
export cwetcprofd="${cwetc}/profile.d"
export cwsw="${cwtop}/software"
export cwtmp="${cwtop}/tmp"
export cwvar="${cwtop}/var"
export cwvarinst="${cwvar}/inst"

# we'll use this for bootstrap since /tmp may be mounted noexec
: ${cwtmptmp:="/usr/local/tmp"}
export cwtmptmp

# temp dir permissions
export cwtmpperm="1777"

# execute perms
export cwexecperm="775"

# start off with an empty recipe and installed list
declare -A cwrecipes cwrecipefiles cwrecipereqs cwrecipeversions cwbootstraprecipes cwinstalled
export cwrecipes
export cwrecipefiles
export cwrecipereqs
export cwrecipeversions
export cwbootstraprecipes
export cwinstalled

# and a "user-visible" var whether we want to use an external jvm/jdk
: ${CW_USE_JAVA:="true"}
: ${CW_EXT_JAVA:="false"}
export CW_USE_JAVA CW_EXT_JAVA
# same for git, default to jgit.sh
: ${CW_USE_JGIT:="true"}
: ${CW_EXT_JGIT:="false"}
: ${CW_GIT_CMD:="jgitsh"}
export CW_USE_JGIT CW_EXT_JGIT CW_GIT_CMD
# time travel?
: ${TS:="$(date '+%Y%m%d%H%M%S')"}
export TS

#
# supported architecture check
#

# architecture names and support
supported_arches=( aarch64 armv6l armv7l armv8l i686 x86_64 )
# qemu-x86_64 on k1om reports x86-64, this should be safe for now
export karch="$(uname -m | tr '-' '_')"

# be somewhat strict about supported architectures
supported=0
for supported_arch in ${supported_arches[@]} ; do
  if [[ ${karch} =~ ^${supported_arch}$ ]] ; then
    supported=1
  fi
done
if [ ${supported} -eq 0 ] ; then
  cwfailexit "architecture ${karch} not supported"
fi

#
# userspace vs kernel architecture check
#

# userspace may be different than kernel, i.e., 32-bit arm on 64-bit aarch64
# we'll use the first chunk of bash $MACHTYPE environment variable
# it will be something like:
#   x86_64-cros-linux-gnu (x86_64 chrome os)
#   armv7a-cros-linux-gnu (armv7l and aarch64 chrome os with 32-bit userspace)
#   arm-unknown-linux-gnueabihf (armv7l (armv6l?) 32-bit debian/ubuntu/raspbian)
#   arm-unknown-linux-gnueabi (armv7l 32-bit debian?)
#   aarch64-unknown-linux-gnu (aarch64 full 64-bit debian/ubuntu)
#   aarch64-alpine-linux-musl (aarch64 full 64-bit alpine)
#   armv6-alpine-linux-musleabihf (armv6/armv7 32-bit alpine)
#   x86_64-generic-linux-gnu (intel clear linux)
#   x86_64-pc-linux-gnu (x86_64 debian/ubuntu)
#   x86_64-redhat-linux-gnu (x86_64 centos/rhel/fedora)
#   i586-alpine-linux-musl (x86 alpine)
#   i686-pc-linux-gnu (i686 debian/ubuntu)
#   i386-redhat-linux-gnu (i686 centos)
#   ...
# transform arm or armv7a to armv7l for parity with "uname -m"
# XXX - this assumes aarch64/x86_64 return the "right" $MACHTYPE
# XXX - this assumes we have hardware float on armv6/v7
# XXX - HOSTTYPE is the first part of MACHTYPE
export bash_triplet="${MACHTYPE}"
bash_arch="${MACHTYPE%%-*}"
if [[ ${bash_arch} =~ ^arm ]] ; then
  if [[ ${bash_arch} =~ ^armv5 ]] ; then
    cwfailexit "it looks like your machine type is ${MACHTYPE}; the minimum is armv6 with hardware float"
  fi
  if [[ ${karch} =~ ^aarch64 ]] ; then
    bash_arch="armv7l"
  elif [[ ${karch} =~ ^armv(6|7|8) ]] ; then
    bash_arch="${bash_arch/#arm*/$(uname -m)}"
  fi
elif [[ ${bash_arch} =~ ^i.86 ]] ; then
  bash_arch="i686"
fi
export uarch="${bash_arch}"

#
# bootstrap vars
#

#
# zulu jdk setup (for bootstrap)
#

# XXX - zulu jdk arch will be uarch

# basic zulu vars
zulu_pkgname="zulu"
zulu_inst_dir="${cwsw}/${zulu_pkgname}"

# zulu environment
declare -A zulu_env
zulu_env["_JAVA_OPTIONS"]="-Djava.io.tmpdir=${cwtmp} -Djava.awt.headless=true"
zulu_env["JAVA_HOME"]="${zulu_inst_dir}/current"
zulu_env["PATH"]='${PATH}:${JAVA_HOME}/bin'
zulu_envs=( "_JAVA_OPTIONS" "JAVA_HOME" "PATH" )

# zulu jdk arch map
# XXX - arm 32-bit hard float assumption, again
declare -A zulu_jdk_arch
zulu_jdk_arch["aarch64"]="aarch64"
zulu_jdk_arch["armv6l"]="aarch32hf"
zulu_jdk_arch["armv7l"]="${zulu_jdk_arch['armv6l']}"
zulu_jdk_arch["armv8l"]="${zulu_jdk_arch['armv6l']}"
zulu_jdk_arch["i686"]="i686"
zulu_jdk_arch["x86_64"]="x64"

# zulu jdk version map
declare -A zulu_jdk_ver
zulu_jdk_ver["aarch64"]="8.46.0.225-ca-jdk8.0.252"
zulu_jdk_ver["armv6l"]="8.46.0.225-ca-jdk8.0.252"
zulu_jdk_ver["armv7l"]="${zulu_jdk_ver['armv6l']}"
zulu_jdk_ver["armv8l"]="${zulu_jdk_ver['armv6l']}"
zulu_jdk_ver["i686"]="8.46.0.19-ca-jdk8.0.252"
zulu_jdk_ver["x86_64"]="8.46.0.19-ca-jdk8.0.252"
zulu_ver="${zulu_jdk_ver[${uarch}]}"

# zulu jdk file sha256sum
declare -A zulu_jdk_sha256sum
zulu_jdk_sha256sum["aarch64"]="504188a49b353ff9424d2ddedc73f9b827c435f6eb5518cd7d592afbb7468152"
zulu_jdk_sha256sum["armv6l"]="6b8b860f4ad73d70391676bef6eeac14893220c8c2d7bf7f1200e327f2ff600e"
zulu_jdk_sha256sum["armv7l"]="${zulu_jdk_sha256sum['armv6l']}"
zulu_jdk_sha256sum["armv8l"]="${zulu_jdk_sha256sum['armv6l']}"
zulu_jdk_sha256sum["i686"]="bba0ec1606823515172e3eee9fcaa9ea29d51be49ee903c4b1e708af3e60a29f"
zulu_jdk_sha256sum["x86_64"]="ab8a4194006f12dd48bf7f176ca7879706d3f8fc7d3208313a46cc9ee2270716"

# zulu directory, file, and url map
declare -A zulu_jdk_dir zulu_jdk_file zulu_jdk_url
for supported_arch in ${supported_arches[@]} ; do
  zulu_jdk_dir[${supported_arch}]="zulu${zulu_jdk_ver[${supported_arch}]}-linux_${zulu_jdk_arch[${supported_arch}]}"
  if [[ ${supported_arch} =~ ^(i686|x86_64)$ ]] ; then
    zulu_jdk_base_url="http://cdn.azul.com/zulu/bin"
  elif [[ ${supported_arch} =~ ^a(rmv|arch) ]] ; then
    zulu_jdk_base_url="http://cdn.azul.com/zulu-embedded/bin"
  fi
  zulu_jdk_file[${supported_arch}]="${zulu_jdk_dir[${supported_arch}]}.tar.gz"
  zulu_jdk_url[${supported_arch}]="${zulu_jdk_base_url}/${zulu_jdk_file[${supported_arch}]}"
done

# zulu install function
function cwinstall_zulu() {
  cwfetchcheck "${zulu_jdk_url[${uarch}]}" "${cwtmptmp}/${zulu_jdk_file[${uarch}]}" "${zulu_jdk_sha256sum[${uarch}]}"
  cwextract "${cwtmptmp}/${zulu_jdk_file[${uarch}]}" "${zulu_inst_dir}"
  cwlinkdir "${zulu_jdk_dir[${uarch}]}" "${zulu_inst_dir}"
  cwexpandenv "${zulu_pkgname}" "${cwetcprofd}/${zulu_pkgname}.sh"
  cwmarkinstall "${zulu_pkgname}" "${zulu_jdk_ver[${uarch}]}"
}

#
# jgit
#

# XXX - make sure java tmpdir is set
jgitsh_ver="5.8.1.202007141445-r"
jgitsh_file="org.eclipse.jgit.pgm-${jgitsh_ver}.sh"
jgitsh_url="https://repo.eclipse.org/content/groups/releases/org/eclipse/jgit/org.eclipse.jgit.pgm/${jgitsh_ver}/${jgitsh_file}"
jgitsh_sha256sum="cc430f7e1633ef463f13d79612c11470d12ec47710a644824ae0648646fafe09"
jgitsh_symlink="jgit.sh"
jgitsh_pkgname="jgitsh"
jgitsh_inst_dir="${cwsw}/${jgitsh_pkgname}"

# jgit environment
declare -A jgitsh_env
jgitsh_env["PATH"]="\${PATH}:${jgitsh_inst_dir}/current/bin"
jgitsh_envs=( "PATH" )

# jgitsh install function
function cwinstall_jgitsh() {
  cwfetchcheck "${jgitsh_url}" "${cwtmptmp}/${jgitsh_file}" "${jgitsh_sha256sum}"
  chmod 775 "${cwtmptmp}/${jgitsh_file}"
  cwmkdir "${jgitsh_inst_dir}/${jgitsh_ver}/bin"
  rm -f "${jgitsh_inst_dir}/${jgitsh_ver}/bin/${jgitsh_file}"
  install -m 0755 "${cwtmptmp}/${jgitsh_file}" "${jgitsh_inst_dir}/${jgitsh_ver}/bin/"
  ln -sf "${jgitsh_file}" "${jgitsh_inst_dir}/${jgitsh_ver}/bin/${jgitsh_pkgname}"
  ln -sf "${jgitsh_file}" "${jgitsh_inst_dir}/${jgitsh_ver}/bin/${jgitsh_symlink}"
  ln -sf "${jgitsh_file}" "${jgitsh_inst_dir}/${jgitsh_ver}/bin/${jgitsh_symlink/%.sh/}"
  cwlinkdir "${jgitsh_ver}" "${jgitsh_inst_dir}"
  cwexpandenv "${jgitsh_pkgname}" "${cwetcprofd}/${jgitsh_pkgname}.sh"
  cwmarkinstall "${jgitsh_pkgname}" "${jgitsh_ver}"
}

#
# static compiler bootstrap
#

# XXX - compiler arch will be karch/uname -m

# common static compiler release/tag, archive, and url
old_static_toolchain_pkgname="static-toolchain"
statictoolchain_archive_ext="tar.bz2"
statictoolchain_checksum_ext="sha256"
statictoolchain_release="202002081013"
statictoolchain_base_url="https://github.com/ryanwoodsmall/musl-misc/releases/download"
statictoolchain_release_url="${statictoolchain_base_url}/${statictoolchain_release}"
statictoolchain_pkgname="statictoolchain"
statictoolchain_inst_dir="${cwsw}/${statictoolchain_pkgname}"

# architecture to musl triplet
declare -A statictoolchain_triplet
statictoolchain_triplet["aarch64"]="aarch64-linux-musl"
statictoolchain_triplet["armv6l"]="arm-linux-musleabihf"
statictoolchain_triplet["armv7l"]="${statictoolchain_triplet['armv6l']}"
statictoolchain_triplet["armv8l"]="${statictoolchain_triplet['armv6l']}"
statictoolchain_triplet["i686"]="i686-linux-musl"
statictoolchain_triplet["x86_64"]="x86_64-linux-musl"

# architecture to version prefix
statictoolchain_ver="${statictoolchain_release}"
declare -A statictoolchain_prefix
statictoolchain_prefix["aarch64"]="${statictoolchain_ver}"
statictoolchain_prefix["armv6l"]="${statictoolchain_ver}"
statictoolchain_prefix["armv7l"]="${statictoolchain_ver}"
statictoolchain_prefix["armv8l"]="${statictoolchain_ver}"
statictoolchain_prefix["i686"]="${statictoolchain_ver}"
statictoolchain_prefix["x86_64"]="${statictoolchain_ver}"

# architecture to filename, urls, sha256 file, dir, ...
declare -A statictoolchain_file statictoolchain_checksum statictoolchain_checksum_file statictoolchain_file_url statictoolchain_checksum_url statictoolchain_dir
for supported_arch in ${supported_arches[@]} ; do
  statictoolchain_file[${supported_arch}]="${statictoolchain_prefix[${supported_arch}]}-${statictoolchain_triplet[${supported_arch}]}.${statictoolchain_archive_ext}"
  statictoolchain_checksum_file[${supported_arch}]="${statictoolchain_file[${supported_arch}]}.${statictoolchain_checksum_ext}"
  statictoolchain_file_url[${supported_arch}]="${statictoolchain_release_url}/${statictoolchain_file[${supported_arch}]}"
  statictoolchain_checksum_url[${supported_arch}]="${statictoolchain_release_url}/${statictoolchain_checksum_file[${supported_arch}]}"
  statictoolchain_dir[${supported_arch}]="${statictoolchain_prefix[${supported_arch}]}-${statictoolchain_triplet[${supported_arch}]}"
done

# static toolchain environment
# XXX - set more ld flags? -s/--strip-all or -S/--strip-debug
declare -A statictoolchain_env
statictoolchain_env["PATH"]="${statictoolchain_inst_dir}/current/bin:\${PATH}"
statictoolchain_env["CFLAGS"]="-Wl,-static -fPIC"
statictoolchain_env["CXXFLAGS"]="-Wl,-static -fPIC"
statictoolchain_env["LDFLAGS"]="-static \${LDFLAGS//-static/}"
statictoolchain_env["CC"]="${statictoolchain_triplet[${karch}]}-gcc"
statictoolchain_env["CXX"]="${statictoolchain_triplet[${karch}]}-g++"
statictoolchain_env["LD"]="${statictoolchain_triplet[${karch}]}-ld"
statictoolchain_env["CPP"]="${statictoolchain_triplet[${karch}]}-cpp"
statictoolchain_env["AR"]="${statictoolchain_triplet[${karch}]}-ar"
statictoolchain_env["AS"]="${statictoolchain_triplet[${karch}]}-as"
statictoolchain_envs=( "PATH" "CFLAGS" "CXXFLAGS" "LDFLAGS" "CC" "CXX" "CPP" "LD" "AR" "AS" )

# statictoolchain install function
function cwinstall_statictoolchain() {
  cwfetch "${statictoolchain_checksum_url[${karch}]}" "${cwtmptmp}/${statictoolchain_checksum_file[${karch}]}"
  cwfetchcheck "${statictoolchain_file_url[${karch}]}" "${cwtmptmp}/${statictoolchain_file[${karch}]}" "$(awk '{print $1}' ${cwtmptmp}/${statictoolchain_checksum_file[${karch}]})"
  cwextract "${cwtmptmp}/${statictoolchain_file[${karch}]}" "${statictoolchain_inst_dir}"
  cwlinkdir "${statictoolchain_dir[${karch}]}" "${statictoolchain_inst_dir}"
  cwexpandenv "${statictoolchain_pkgname}" "${cwetcprofd}/${statictoolchain_pkgname}.sh"
  cwmarkinstall "${statictoolchain_pkgname}" "${statictoolchain_prefix[${karch}]}"
}

#
# "special" bootstrap recipes
#
for cwbootstraprecipe in "${zulu_pkgname}" "${jgitsh_pkgname}" "${statictoolchain_pkgname}" ; do
  cwbootstraprecipes["${cwbootstraprecipe}"]=1
done
export cwbootstraprecipes

#
# generate cw*_${bootstraprecipe} functions
#
for cwbootstraprecipe in ${!cwbootstraprecipes[@]} ; do
  eval "
  function cwver_${cwbootstraprecipe}() {
    echo \"\${${cwbootstraprecipe}_ver}\"
  }
  function cwuninstall_${cwbootstraprecipe}() {
    rm -rf \"${cwsw}/\${${cwbootstraprecipe}_pkgname}\"
    rm -f \"${cwetcprofd}/\${${cwbootstraprecipe}_pkgname}.sh\"
    rm -f \"${cwvarinst}/${cwbootstraprecipe}\"
  }
  function cwlistreqs_${cwbootstraprecipe}() {
    echo \"\"
  }
  "
  cwrecipefiles[${cwbootstraprecipe}]="${cwtop}/bin/crosware"
  cwrecipeversions[${cwbootstraprecipe}]="$(cwver_${cwbootstraprecipe})"
  cwrecipereqs[${cwbootstraprecipe}]=""
done

#
# cwchecktop
#
function cwchecktop() {
  if [ ! -e "${cwtop}" ] ; then
    cwfailexit "${cwtop} does not exist, have you run '${cwname} bootstrap' yet?"
  fi
}

#
# cwmkdir
#   mkdir -p with check/wrapper
#
function cwmkdir() {
  local tgtdir="${1}"
  if [ ! -e "${tgtdir}" ] ; then
    cwscriptecho "creating directory ${tgtdir}"
    mkdir -p "${tgtdir}" || cwfailexit "could not create ${tgtdir}"
  fi
  test -e "${tgtdir}" || cwfailexit "${tgtdir} still doesn't exist"
}

#
# cwchmod
#   chmod wrapper
#   receives:
#     octal mode
#     path
#
function cwchmod() {
  local tgtmode="${1}"
  local tgtpath="${2}"
  cwscriptecho "setting mode ${tgtmode} on ${tgtpath}"
  chmod "${tgtmode}" "${tgtpath}" || cwfailexit "could not set mode ${tgtmode} on ${tgtpath}"
}

# cwmkcwtmptmp
#   check and make our temporary temporary directory
#
function cwmkcwtmptmp() {
  if [ ! -e "${cwtmptmp}" ] ; then
    cwmkdir "${cwtmptmp}"
    cwchmod "${cwtmpperm}" "${cwtmptmp}"
  fi
}

#
# cwfetch
#   receives:
#     url to download
#     full path to save file to
#
function cwfetch() {
  local downloadurl="${1}"
  local targetfile="${2}"
  local targetdir="$(dirname "${targetfile}")"
  cwmkdir "${targetdir}"
  cwscriptecho "downloading ${downloadurl} to ${targetfile}"
  curl ${cwcurlopts} -o "${targetfile}" "${downloadurl}"
  if [ "${?}" -eq 0 ] ; then
    cwscriptecho "successfully downloaded ${downloadurl} to ${targetfile}"
    return 0
  else
    cwfailexit "curl failed for ${downloadurl}"
    return 1
  fi
}

#
# cwchecksha256sum
#   receives:
#     full path to file to check
#     sha256sum for comparison
#
function cwchecksha256sum() {
  local checkfile="${1}"
  local storedsha256sum="${2}"
  cwscriptecho "checking sha256sum for ${checkfile}"
  local sha256sum="$(sha256sum ${checkfile} | awk '{print $1}')"
  if [ "${storedsha256sum}" == "${sha256sum}" ] ; then
    cwscriptecho "sha256 checksum succeeded for ${checkfile}"
    return 0
  else
    cwscriptecho "sha256 checksum failed for ${checkfile}"
    return 1
  fi
}

#
# cwfetchcheck
#   receives:
#     url to download
#     full path to save file
#     sha256sum for comparison
#
function cwfetchcheck() {
  local downloadurl="${1}"
  local targetfile="${2}"
  local storedsha256sum="${3}"
  if [ -e "${targetfile}" ] ; then
    cwscriptecho "${targetfile} already exists"
    local sha256sum="$(sha256sum ${targetfile} | awk '{print $1}')"
    if [ "${storedsha256sum}" == "${sha256sum}" ] ; then
      cwscriptecho "existing ${targetfile} matched checksum"
      return
    else
      cwscriptecho "existing ${targetfile} failed checksum, redownloading"
    fi
  fi
  cwfetch "${downloadurl}" "${targetfile}"
  cwchecksha256sum "${targetfile}" "${storedsha256sum}" || cwfailexit "fetch and sha256 checksum of ${downloadurl} failed"
}

#
# cwextract
#   receives:
#     full path to file
#     target directory
#
function cwextract() {
  local archive="${1}"
  local tgtdir="${2}"
  test -e "${tgtdir}" || cwmkdir "${tgtdir}"
  cwscriptecho "extracting ${archive} to ${tgtdir}"
  if [[ ${archive} =~ \.t(|ar)(|.)bz(|2)$ ]] ; then
    ${cwuntbz2} "${archive}" -C "${tgtdir}"
  elif [[ ${archive} =~ \.t(|ar)(|.)gz$ ]] ; then
    ${cwuntgz} "${archive}" -C "${tgtdir}"
  elif [[ ${archive} =~ \.t(|ar)(|.)xz$ ]] ; then
    ${cwuntxz} "${archive}" -C "${tgtdir}"
  elif [[ ${archive} =~ \.t(|ar)(|.)lz$ ]] ; then
    lunzip -dc "${archive}" | ${cwuntar} - -C "${tgtdir}"
  elif [[ ${archive} =~ \.zip$ ]] ; then
    ${cwunzip} "${archive}" -d "${tgtdir}"
  else
    cwfailexit "archive type of ${archive} not understood"
  fi
  if [ ${?} -eq 0 ] ; then
    cwscriptecho "extraction of ${archive} succeeded"
  else
    cwfailexit "extraction of ${archive} failed"
  fi
}

#
# cwlinkdir
#   receives:
#     directory name/path (relative or full)
#     full path to a directory to run in
#
# shuffles previous/current symlinks
#
function cwlinkdir() {
  local linktgt="${1}"
  local linkdir="${2}"
  local prev="${linkdir}/previous"
  local curr="${linkdir}/current"
  cwscriptecho "setting up ${linktgt} symlink in ${linkdir}"
  if [ -e "${prev}" ] ; then
    rm -f "${prev}" || cwfailexit "could not remove ${prev}"
  fi
  if [ -e "${curr}" ] ; then
    mv "${curr}" "${prev}" || cwfailexit "could not move ${curr} to ${prev}"
  fi
  ln -sf "${linktgt}" "${curr}" || cwfailexit "could not symlink ${linktgt} to ${curr}"
}

#
# cwexpandenv
#   receives:
#     name of var
#     full path of file to expand into
#
# expands environment variables for a given name
# assumes the existence of:
#   example_env['VAR']='value' - hash/associative array
#   example_envs[0]='VAR' - normal array controlling expanded vars and ordering
#
function cwexpandenv() {
  local name="${1}"
  local envfile="${2}"
  if [ -e "${envfile}" ] ; then
    rm -f "${envfile}" || cwfailexit "could not remove existing ${envfile}"
  fi
  echo -n > "${envfile}" || cwfailexit "could not (re)create ${envfile}"
  for var in $(eval echo \${${name}_envs[@]}) ; do
    echo "export ${var}=\"$(eval echo \${${name}_env[${var}]})\"" >> "${envfile}"
  done
}

#
# cwprofileline
#
function cwprofileline() {
  echo
  echo "  test -e ${cwetc}/profile && source ${cwetcprofile}"
  echo
}

#
# cwbootstrap
#
function cwbootstrap() {
  bootstrapped=1
  # check if we're already bootstrapped and fetch/merge if we are
  if [ -e "${cwtop}" ] ; then
    bootstrapped=0
  fi
  cwscriptecho "bootstrapping"
  # make sure we have a tmp directory
  cwmkcwtmptmp
  # architecture specfic toolchain checksum file
  local statictoolchainchecksumfile="${cwtmptmp}/${statictoolchain_checksum_file[${karch}]}"
  cwfetch "${statictoolchain_checksum_url[${karch}]}" "${statictoolchainchecksumfile}"
  local statictoolchainchecksum="$(awk '{print $1}' ${statictoolchainchecksumfile})"
  # static toolchain
  local statictoolchainarchive="${cwtmptmp}/${statictoolchain_file[${karch}]}"
  cwfetchcheck "${statictoolchain_file_url[${karch}]}" "${statictoolchainarchive}" "${statictoolchainchecksum}"
  # git
  # jgit
  if [ "${CW_USE_JGIT}" == "true" ] ; then
    if [ "${CW_EXT_JGIT}" == "false" ] ; then
      local jgitsh="${cwtmptmp}/${jgitsh_file}"
      cwfetchcheck "${jgitsh_url}" "${jgitsh}" "${jgitsh_sha256sum}"
      cwchmod "${cwexecperm}" "${jgitsh}"
      ln -sf "${jgitsh_file}" "${cwtmptmp}/${jgitsh_symlink}"
      ln -sf "${jgitsh_file}" "${cwtmptmp}/${jgitsh_pkgname}"
      export PATH="${cwtmptmp}:${PATH}"
    fi
  fi
  # zulu
  if [ "${CW_USE_JAVA}" == "true" -a "${CW_EXT_JAVA}" == "false" ] ; then
    local zuluarchive="${cwtmptmp}/${zulu_jdk_file[${uarch}]}"
    local zulujdkdir="${cwtmptmp}/${zulu_jdk_dir[${uarch}]}"
    cwfetchcheck "${zulu_jdk_url[${uarch}]}" "${zuluarchive}" "${zulu_jdk_sha256sum[${uarch}]}"
    cwextract "${zuluarchive}" "${cwtmptmp}"
    # add zulu and tmp dir (for jgit) to our path
    export JAVA_HOME="${zulujdkdir}"
    export PATH="${JAVA_HOME}/bin:${PATH}"
  fi
  # clone or fetch the repo
  if [ ${bootstrapped} -eq 1 ] ; then
    cwscriptecho "attempting to clone ${cwurl} into ${cwtop}"
    ${CW_GIT_CMD} clone "${cwurl}" "${cwtop}" || cwfailexit "could not clone ${cwurl} into ${cwtop}"
  else
    cwupdate
  fi
  # setup our base tools
  # zulu
  if [ "${CW_USE_JAVA}" == "true" -a "${CW_EXT_JAVA}" == "false" ] ; then
    cwinstall "${zulu_pkgname}"
  fi
  # git
  # jgit
  if [ "${CW_USE_JGIT}" == "true" ] ; then
    if [ "${CW_EXT_JGIT}" == "false" ] ; then
      cwinstall "${jgitsh_pkgname}"
    fi
  fi
  # toolchain
  cwinstall "${statictoolchain_pkgname}"
  # set tmp directory perm
  cwchmod "${cwtmpperm}" "${cwtmp}"
  # we're bootstrapped...
  cwscriptecho "bootstrap complete"
  cwscriptecho "add ${cwname} to your environment with a line in your .profile/.bash_profile/.bashrc"
  cwprofileline
  # cleanup temp files?
  if [ "${CW_USE_JAVA}" == "true" -a "${CW_EXT_JAVA}" == "false" ] ; then
    cwscriptecho "removing temporary zulu jdk directory"
    rm -rf "${zulujdkdir}"
  fi
  # if we have an old "static-toolchain" setup, move it out of the way
  if [ -e "${cwsw}/${old_static_toolchain_pkgname}" ] ; then
    if [ ! -L "${cwsw}/${old_static_toolchain_pkgname}" ] ; then
      mv ${cwsw}/${old_static_toolchain_pkgname}{,.PRE-${TS}}
    fi
  # make sure we have a static-toolchain -> statictoolchain symlink just in case
  else
    ln -sf ${cwsw}/${statictoolchain_pkgname} ${cwsw}/${old_static_toolchain_pkgname}
  fi
  if [ -e "${cwvarinst}/${old_static_toolchain_pkgname}" ] ; then
    rm -f ${cwvarinst}/${old_static_toolchain_pkgname}
  fi
  if [ -e "${cwetcprofd}/${old_static_toolchain_pkgname}.sh" ] ; then
    mv ${cwetcprofd}/${old_static_toolchain_pkgname}.sh{,.OFF}
  fi
}

#
# cwsourceprofile
#
function cwsourceprofile() {
  cwchecktop
  if [ ! -e "${cwetcprofile}" ] ; then
    cwscriptecho "${cwetcprofile} does not exist"
    return 1
  fi
  source "${cwetcprofile}"
}

#
# cwupdate
#
function cwupdate() {
  cwchecktop
  cwscriptecho "it looks like ${cwtop} already exists, attempting update"
  if [ ! -e "${cwtop}/.git" ] ; then
    cwfailexit "${cwtop} doesn't appear to be a git clone"
  else
    cwsourceprofile
    cwscriptecho "attempting to fetch/merge in ${cwtop}"
    pushd "${cwtop}" >/dev/null 2>&1 || cwfailexit "could not pushd into ${cwtop}"
    cwscriptecho "${FUNCNAME[0]} using client ${CW_GIT_CMD}: $(${CW_GIT_CMD} version 2>/dev/null ; true)"
    ${CW_GIT_CMD} fetch "${cworigin}" || { popd ; cwfailexit "could not fetch ${cworigin} in ${cwtop}" ; }
    ${CW_GIT_CMD} merge "${cworigin}/${cwbranch}" || { popd ; cwfailexit "could not merge ${cworigin}/${cwbranch} in ${cwtop}" ; }
    popd >/dev/null 2>&1
    cwchmod "${cwtmpperm}" "${cwtmp}"
  fi
}

#
# cwsourcerecipes
#
function cwsourcerecipes() {
  cwchecktop
  if [ ! -e ${cwrecipe} ] ; then
    cwscriptecho "no recipe directory ${cwrecipe} found"
    return 1
  fi
  for recipefile in ${cwrecipe}/*/*.sh ; do
    rname=""
    source ${recipefile}
    if [ ! -z "${rname}" ] ; then
      cwrecipes["${rname}"]=1
      cwrecipefiles["${rname}"]="${recipefile}"
      cwrecipeversions["${rname}"]="${rver}"
      if [[ ${rreqs} =~ \{*\} ]] ; then
        cwrecipereqs["${rname}"]="$(cwlistreqs_${rname})"
      else
        cwrecipereqs["${rname}"]="${rreqs}"
      fi
    fi
    unset rname rver rfile rurl rprof rreqs rbreqs rsha256 rdir ridir rbdir rtdir rdeps rbdeps rlibtool rconfigureopts rcommonopts rdlfile
  done
  unset recipefile
  export cwrecipes
}

#
# cwlistrecipes
#
function cwlistrecipes() {
  cwsourcerecipes
  for recipe in ${!cwrecipes[@]} ${!cwbootstraprecipes[@]} ; do
    echo "${recipe}"
  done | sort
}

#
# cwlistrecipefiles
#
function cwlistrecipefiles() {
  cwsourcerecipes
  for recipe in ${!cwrecipes[@]} ${!cwbootstraprecipes[@]} ; do
    echo "${recipe} : ${cwrecipefiles[${recipe}]}"
  done | sort
}

#
# cwlistrecipeversions
#
function cwlistrecipeversions() {
  cwsourcerecipes
  for recipe in ${!cwrecipes[@]} ${!cwbootstraprecipes[@]} ; do
    echo "${recipe} : ${cwrecipeversions[${recipe}]}"
  done | sort
}

#
# cwlistrecipereqs
#
function cwlistrecipereqs() {
  cwsourcerecipes
  for recipe in ${!cwrecipes[@]} ${!cwbootstraprecipes[@]} ; do
    echo "${recipe} : ${cwrecipereqs[${recipe}]}"
  done | sort
}

#
# cwinstall
#
# build/install some stuff
#
function cwinstall() {
  local recipestobuild=()
  cwsourceprofile
  cwsourcerecipes
  for recipe in "${@}" ; do
    if ! $(set | grep -q "^cwinstall_${recipe} ") ; then
      cwfailexit "recipe ${recipe} not found"
    fi
    recipestobuild[${#recipestobuild[@]}]="cwinstall_${recipe}"
  done
  test ${#recipestobuild[@]} -eq 0 && cwfailexit "please provide at least one valid recipe to build"
  for buildrecipe in ${recipestobuild[@]} ; do
    cwsourceprofile
    cwscriptecho "installing recipe ${buildrecipe//cwinstall_/}"
    ${buildrecipe}
  done
}

#
# cwmarkinstall
#   receives:
#     package/recipe name
#     package/recipe version
#
# writes a file to ${cwvarinst}/${pkgname} containing the pkg version
#
function cwmarkinstall() {
  local pkgname="${1}"
  local pkgver="${2}"
  local pkgfile="${cwvarinst}/${pkgname}"
  cwmkdir "${cwvarinst}"
  echo "${pkgver}" > "${pkgfile}" || cwfailexit "could not write ${pkgfile}"
}

#
# cwlistinstalled
#
function cwlistinstalled() {
  local pkgfile=""
  local pkgname=""
  local pkgver=""
  cwgetinstalled
  for pkgname in ${!cwrecipes[@]} ${!cwbootstraprecipes[@]} ; do
    if [ ${cwinstalled[${pkgname}]} -eq 1 ] ; then
      pkgfile="${cwvarinst}/${pkgname}"
      pkgver="$(cat ${pkgfile})"
      echo "${pkgname} : ${pkgver}"
    fi
  done | sort
}

#
# cwcheckinstalled
#   receives:
#     recipe package name
#
# returns 0 if installed, 1 if not
#
function cwcheckinstalled() {
  local pkgname="${1%% *}"
  if [ -e "${cwvarinst}/${pkgname}" ] ; then
    return 0
  fi
  return 1
}

#
# cwgetinstalled
#   updates recipe installation status
#
function cwgetinstalled() {
  local pkgname=""
  if [ ! -e "${cwvarinst}" ] ; then
    cwscriptecho "directory ${cwvarinst} does not exist"
    return 1
  fi
  cwsourceprofile
  cwsourcerecipes
  for pkgname in ${!cwrecipes[@]} ${!cwbootstraprecipes[@]} ; do
    cwinstalled[${pkgname}]="$(cwcheckinstalled ${pkgname} && echo 1 || echo 0)"
  done
}

#
# cwlistavailable
#
# lists available but uninstalled recipes
#
function cwlistavailable() {
  local pkgname=""
  cwgetinstalled
  for pkgname in ${!cwrecipes[@]} ${!cwbootstraprecipes[@]} ; do
    if [ ${cwinstalled[${pkgname}]} -ne 1 ] ; then
      echo "${pkgname}"
    fi
  done | sort
}

#
# cwlistupgradable
#
# XXX - need cwgetupgradable()
#  get installed
#  for all installed get recipe version
#  if inst ver doesn't match, it's upgradble
#  can be used to recursively chase downstream upgradable reqs
#
function cwlistupgradable() {
  cwsourcerecipes
  local recipe=""
  declare -A installedrecipe
  for installed in $(cwlistinstalled | sed "s/ : /|/g") ; do
    installedrecipe["${installed%%|*}"]="${installed#*|}"
  done
  for recipe in $(echo ${!installedrecipe[@]} | tr ' ' '\n' | sort) ; do
    local rv="$(cwver_${recipe})"
    local iv="${installedrecipe[${recipe}]}"
    if [[ $rv != $iv ]] ; then
      echo $recipe : $iv : $rv
    fi
  done
}

#
# cwuninstall
#
# uninstall some recipes
#
function cwuninstall() {
  cwsourcerecipes
  local recipe=""
  for recipe in "${@}" ; do
    if ! $(set | grep -q "^cwuninstall_${recipe} ") ; then
      cwscriptecho "no uninstall found for ${recipe}"
      continue
    fi
    if $(cwcheckinstalled ${recipe}) ; then
      cwscriptecho "uninstalling ${recipe}"
      cwuninstall_${recipe}
    fi
  done
}

#
# cwupgrade
#
# uninstall and install recipes
#
function cwupgrade() {
  local upgrade=""
  for upgrade in "${@}" ; do
    cwuninstall "${upgrade}"
    cwinstall "${upgrade}"
  done
}

#
# cwupgradeall
#
# upgrade all packages that we can
#
function cwupgradeall() {
  local upgradable=""
  for upgradable in $(cwlistupgradable | cut -f1 -d' ') ; do
    cwupgrade "${upgradable}"
  done
}

#
# cwenv
#
function cwenv() {
  cwsourcerecipes
  cwsourceprofile
  env
}

#
# cwset
#   XXX - ungodly slow, need caching/memoization here
#
function cwset() {
  cwsourcerecipes
  cwsourceprofile
  cwgetinstalled
  set
}

#
# cwlistfuncs
#
function cwlistfuncs() {
  cwset \
  | grep -F ' ()' \
  | cut -f1 -d' '
}

#
# cwshowfunc
#
function cwshowfunc() {
  local funclist
  if [ ${#} -le 0 ] ; then
    cwscriptecho "warning: this will be really slow..." 1>&2
    funclist="$(cwlistfuncs)"
  else
    funclist="${@}"
  fi
  for funcname in ${funclist} ; do
    cwset \
    | sed -n '/^'"${funcname}"' ()/,/^}$/!d;p'
  done
  unset funcname funclist
}

#
# cwrunfunc
#   receives:
#     at least one function name
#
# run a function that we know about
# arguments can be passed with commas
#
function cwrunfunc() {
  cwsourcerecipes
  cwsourceprofile
  local cwfunc
  local cwfuncname
  for cwfunc in "${@}" ; do
    cwfuncname="${cwfunc%%,*}"
    if ! $(set | grep -q "^${cwfuncname} ") ; then
      cwscriptecho "function ${cwfuncname} not known"
      continue
    fi
    eval "${cwfunc//,/ }"
  done
  unset cwfunc
  unset cwfuncname
}

#
# show architecture(s)
#
function cwshowarch() {
  local t="a"
  if [ ${#} -ge 1 ] ; then
    t="${1}"
  fi
  if [[ ${t} == k ]] ; then
    echo "${karch}"
  elif [[ ${t} == u ]] ; then
    echo "${uarch}"
  else
    echo "k:${karch}"
    echo "u:${uarch}"
  fi
}

#
# check uniqueness of space delimited elements (for loop detection)
#   XXX - leverage uniq?
#   XXX - better as an array, i.e.:
#     l=( $(echo ${@}) )
#     t=${l[0]}
#     echo ${l} | tr ' ' '\n' | tail -$((${#l[@]}-1)) | grep -q "^${t}$" && fail
#   *or* tail -$(expr ${#l[@]} - 1)
#   XXX - literally doing car/cdr here
#   XXX - better to count?
#     i.e., a list with one element selected out of it should be exactly one less than start
#   XXX - this needs to be way better.
#
function cwcheckuniq() {
  if [[ x${@} =~ ^x$ ]] ; then
    return 0
  fi
  local a="${@}"
  shift
  local r="${@}"
  local t="${a%%${r}}"
  #local t="$(echo "${a}" | sed "s#${r}\$##g")"
  t="${t// }"
  echo "${r}" | tr ' ' '\n' | grep -q "^${t}$" && cwfailexit "non-unique element '${t}' detected in stack '${a}' - possible cycle"
  unset a r t
  return 0
}

#
# usage
#
function cwusage() {
  echo "usage: ${cwname} [command]"
  echo
  echo "commands:"
  for cwcmd in $(echo ${!cwcmds[@]} | tr ' ' '\n' | sort) ; do
    echo "  ${cwcmd} : ${cwcmds[${cwcmd}]}"
  done
  echo
}

#
# make sure we have a command
#
if [ ${#} -lt 1 ] ; then
  cwusage
  cwfailexit "exiting"
fi

#
# exit on unknown command
#
cmd="${1}"
if [[ ! ${cwcmdlist[@]} =~ ${cmd} ]] ; then
  cwfailexit "command ${cmd} not found"
fi
shift

#
# execute our given command
#
# XXX - commands will have additional arguments, i.e., package name for install, etc.
case "${cmd}" in
  bootstrap)
    cwbootstrap
    ;;
  update)
    cwupdate
    ;;
  env)
    # unnecessary, gratuitous use of cat
    test -e "${cwetc}/profile" && \
      cat "${cwetc}/profile" \
      | sed "s#^\(cwetcdir\)=.*#\1=${cwetc}#g" \
      | sed "s#^\(cwbindir\)=.*#\1=${cwbin}#g" \
      | sed "s#^\(cwtop\)=.*#\1=${cwtop}#g"
    ;;
  profile)
    cwprofileline
    ;;
  list-recipes)
    cwlistrecipes
    ;;
  list-recipe-files)
    cwlistrecipefiles
    ;;
  list-recipe-versions)
    cwlistrecipeversions
    ;;
  list-recipe-reqs)
    cwlistrecipereqs
    ;;
  list-installed)
    cwlistinstalled
    ;;
  list-available)
    cwlistavailable
    ;;
  list-upgradable|list-upgradeable)
    cwlistupgradable
    ;;
  install)
    cwinstall "${@}"
    ;;
  uninstall)
    cwuninstall "${@}"
    ;;
  set)
    cwset
    ;;
  list-funcs)
    cwlistfuncs
    ;;
  run-func)
    cwrunfunc "${@}"
    ;;
  show-func)
    cwshowfunc "${@}"
    ;;
  show-arch)
    cwshowarch
    ;;
  show-env)
    cwenv
    ;;
  show-karch)
    cwshowarch "k"
    ;;
  show-uarch)
    cwshowarch "u"
    ;;
  upgrade)
    cwupgrade "${@}"
    ;;
  upgrade-all)
    cwupgradeall
    ;;
  check-installed)
    cwcheckinstalled "${@}"
    ;;
  help)
    cwusage
    ;;
  *)
    cwfailexit "command ${cmd} not found"
    ;;
esac
