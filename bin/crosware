#!/bin/bash

#
# XXX
#  - check that we're running as root
#  - top directory (/usr/local/crosware)
#    - will need to checkout repo in $(dirname ${cwtop})
#    - software install dir (/usr/local/crosware/software/packagename/packagename-vX.Y.Z)
#    - download dir (/usr/local/crosware/download or ~/Downloads)
#    - build dir (/usr/local/crosware/build)
#    - current/previous symlinks for versioned installs
#    - ignore directories with generated files (path, cpp/ld flags, ...)
#    - ignore software install dir
#    - ignore 
#  - what will a "reboostrap" do?
#  - canonical arch
#    - use static "toybox file" to figure out?
#  - java arch
#  - all(?) aarch64 chrome os machines are using 32-bit armv7l userland (for arm chrome pepper/flash?)
#    - jdk will need to be arm on aarch64
#  - handle armv8l 32-bit compat on aarch64
#  - handle i386 (?)
#    - no current, supported chrome os devices are 32-bit
#    - maybe grab neverware cloudready 32b for testing?
#  - files to source w/path, compiler vars, pkg-config, etc.
#    - top-level etc/profile to source
#    - sources an etc/local and/or etc/local.d with shell snippets (obvious, local settings)
#    - reads in generated shell snippets (one per package) to set:
#      - PATH (etc/paths.d)
#      - CC, CXX, CFLAGS, CXXFLAGS, CPPFLAGS, LDFLAGS (etc/cppflags.d, etc/ldflags.d, ...)
#      - PKG_CONFIG_PATH, PKG_CONFIG_LIBDIR (etc/pkg-config.d)
#  - dependencies and dependants (maybe?)
#    - simple directory of files with pkgname.dependents, pkgname.dependencies
#  - install must chase down upstream deps
#  - update may require downstream dep updates
#  - etc/local.d - scriptlets, not tracked in git
#  - var/ - track installs/versions
#  - use_local_java - env var to avoid dl/use of zulu during bootstrap
#  - jgit.sh doesn't have "jgit.sh pull" shortcut; use:
#    - jgit.sh fetch origin ; jgit.sh merge origin/master
#

#
# we'll use these everywhere
#
scriptname="$(basename ${0})"

function cwscriptecho() {
  echo -e "${scriptname}: ${1}"
}

function cwfailexit() {
  cwscriptecho "${1}"
  exit 1
}

#
# shell feature and usage check
#

# make sure we're using bash and not sourced
if [ -z "${BASH_SOURCE}" -o "${0}" != "${BASH_SOURCE}" ] ; then
  echo "please execute this script instead of sourcing it"
  if [ "${0}" != "${BASH_SOURCE}" ] ; then
    return
  fi
  exit 1
fi

# check that we're using bash 4
if [ ${BASH_VERSINFO[0]} -lt 4 ] ; then
  cwfailexit "please make sure GNU Bash 4+ is in use"
fi

# exit early, exit often
set -eu

#
# prereqs
#
# XXX - curl, ... wget? what else? check for tls/ssl support?
prereqs=( curl sha256sum wget )
for prereq in ${prereqs[@]} ; do
  which "${prereq}" >/dev/null 2>&1 || {
    cwfailexit "${prereq} not found"
  }
done

#
# common opts
#
# curl
#  XXX
#   -s for silent downloads?
#   -f for fail on http error
copts=" -f -k -L "

#
# where we live
#
# XXX - default to /usr/local/crosware but allow override (that may or may not work)
: ${cwtop:="/usr/local/crosware"}
export cwtop
export cwbuild="${cwtop}/builds"
export cwddl="${cwtop}/downloads"
export cwetc="${cwtop}/etc"
export cwsw="${cwtop}/software"
export cwtmp="${cwtop}/tmp"

# we'll use this for bootstrap since /tmp may be mounted noexec
: ${tmptmp:="/usr/local/tmp"}
export tmptmp

# temp dir permissions
export tmpperm="1777"

#
# supported architecture check
#

# architecture names and support
supported_arches=( aarch64 armv6l armv7l armv8l i686 x86_64 )
export karch="$(uname -m)"

# be somewhat strict about supported architectures
supported=0
for supported_arch in ${supported_arches[@]} ; do
  if [[ ${karch} =~ ^${supported_arch}$ ]] ; then
    supported=1
  fi
done
if [ ${supported} -eq 0 ] ; then
  cwfailexit "architecture ${karch} not supported"
fi

#
# userspace vs kernel architecture check
#

# userspace may be different than kernel, i.e., 32-bit arm on 64-bit aarch64
# we'll use the first chunk of bash $MACHTYPE environment variable
# it will be something like:
#   x86_64-cros-linux-gnu (x86_64 chrome os)
#   armv7a-cros-linux-gnu (armv7l and aarch64 chrome os with 32-bit userspace)
#   arm-unknown-linux-gnueabihf (armv7l (armv6l?) 32-bit debian/ubuntu/raspbian)
#   arm-unknown-linux-gnueabi (armv7l 32-bit debian?)
#   aarch64-unknown-linux-gnu (aarch64 full 64-bit debian/ubuntu)
#   aarch64-alpine-linux-musl (aarch64 full 64-bit alpine)
#   armv6-alpine-linux-musleabihf (armv6/armv7 32-bit alpine)
#   x86_64-generic-linux-gnu (intel clear linux)
#   x86_64-pc-linux-gnu (x86_64 debian/ubuntu)
#   x86_64-redhat-linux-gnu (x86_64 centos/rhel/fedora)
#   i586-alpine-linux-musl (x86 alpine)
#   i686-pc-linux-gnu (i686 debian/ubuntu)
#   i386-redhat-linux-gnu (i686 centos)
#   ...
# transform arm or armv7a to armv7l for parity with "uname -m"
# XXX - this assumes aarch64/x86_64 return the "right" $MACHTYPE
# XXX - this assumes we have hardware float on armv6/v7
export bash_triplet="${MACHTYPE}"
bash_arch="${MACHTYPE%%-*}"
if [[ ${bash_arch} =~ ^arm ]] ; then
  if [[ ${karch} =~ ^aarch64 ]] ; then
    bash_arch="armv7l"
  elif [[ ${karch} =~ ^armv(6|7|8) ]] ; then
    bash_arch="${bash_arch/#arm*/$(uname -m)}"
  fi
elif [[ ${bash_arch} =~ ^i.86 ]] ; then
  bash_arch="i686"
fi
export uarch="${bash_arch}"

#
# bootstrap vars
#

#
# zulu jdk setup (for bootstrap)
#

# XXX - zulu jdk arch will be uarch

# basic zulu vars
zulu_inst_dir="${cwsw}/zulu"

# zulu jdk arch map
# XXX - arm 32-bit hard float assumption, again
declare -A zulu_jdk_arch
zulu_jdk_arch["aarch64"]="aarch64"
zulu_jdk_arch["armv6l"]="aarch32hf"
zulu_jdk_arch["armv7l"]="aarch32hf"
zulu_jdk_arch["armv8l"]="aarch32hf"
zulu_jdk_arch["i686"]="i686"
zulu_jdk_arch["x86_64"]="x64"

# zulu jdk version map
declare -A zulu_jdk_ver
zulu_jdk_ver["aarch64"]="1.8.0_152-8.25.0.79"
zulu_jdk_ver["armv6l"]="1.8.0_152-8.25.0.76"
zulu_jdk_ver["armv7l"]="1.8.0_152-8.25.0.76"
zulu_jdk_ver["armv8l"]="1.8.0_152-8.25.0.76"
zulu_jdk_ver["i686"]="8.25.0.3-jdk8.0.153"
zulu_jdk_ver["x86_64"]="8.27.0.7-jdk8.0.162"

# zulu jdk file sha256sum
declare -A zulu_jdk_sha256sum
zulu_jdk_sha256sum["aarch64"]="45997b734a0d3ec5035b836f8c235d291c677547811704e3c62f656ee943cdc8"
zulu_jdk_sha256sum["armv6l"]="a7bc9f9edd1cf60aad51b9c6b93c8dcf49af87891b8de5d7982d0d97bfb43636"
zulu_jdk_sha256sum["armv7l"]="a7bc9f9edd1cf60aad51b9c6b93c8dcf49af87891b8de5d7982d0d97bfb43636"
zulu_jdk_sha256sum["armv8l"]="a7bc9f9edd1cf60aad51b9c6b93c8dcf49af87891b8de5d7982d0d97bfb43636"
zulu_jdk_sha256sum["i686"]="1a12eae6d8497ec001d1fbbc7dad68d1c2c687d52cf28671b427ff788c1c6ef8"
zulu_jdk_sha256sum["x86_64"]="8940e6e12a326ede65e55a0fd3815387862e3fa42684eb49cb3b52fbde8b0c4f"

# zulu directory, file, and url map
declare -A zulu_jdk_dir zulu_jdk_file zulu_jdk_url
for supported_arch in ${supported_arches[@]} ; do
  if [[ ${supported_arch} =~ ^(i686|x86_64)$ ]] ; then
    zulu_jdk_dir[${supported_arch}]="zulu${zulu_jdk_ver[${supported_arch}]}-linux_${zulu_jdk_arch[${supported_arch}]}"
    zulu_jdk_base_url="http://cdn.azul.com/zulu/bin"
  elif [[ ${supported_arch} =~ ^a(rmv|arch) ]] ; then
    zulu_jdk_dir[${supported_arch}]="ezdk-${zulu_jdk_ver[${supported_arch}]}-eval-linux_${zulu_jdk_arch[${supported_arch}]}"
    zulu_jdk_base_url="http://cdn.azul.com/zulu-embedded/bin"
  fi
  zulu_jdk_file[${supported_arch}]="${zulu_jdk_dir[${supported_arch}]}.tar.gz"
  zulu_jdk_url[${supported_arch}]="${zulu_jdk_base_url}/${zulu_jdk_file[${supported_arch}]}"
done

#
# jgit
#

# XXX - will need to make sure java tmpdir is set
# https://repo.eclipse.org/content/groups/releases/org/eclipse/jgit/org.eclipse.jgit.pgm/4.9.1.201712030800-r/org.eclipse.jgit.pgm-4.9.1.201712030800-r.sh
jgitsh_ver="4.10.0.201712302008-r"
jgitsh_file="org.eclipse.jgit.pgm-${jgitsh_ver}.sh"
jgitsh_url="https://repo.eclipse.org/content/groups/releases/org/eclipse/jgit/org.eclipse.jgit.pgm/${jgitsh_ver}/${jgitsh_file}"
jgitsh_sha256sum="76305c50c934f05838d876604a474b188b6b7a374aa87923eb5803028fcf8cd9"
jgitsh_symlink="jgit.sh"
jgitsh_inst_dir="${cwsw}/jgit"

#
# static compiler bootstrap
#

# XXX - compiler arch will be karch/uname -m

# common static compiler release/tag, archive, and url
static_toolchain_archive_ext="tar.bz2"
static_toolchain_checksum_ext="sha256"
static_toolchain_release="20180207"
static_toolchain_base_url="https://github.com/ryanwoodsmall/musl-misc/releases/download"
static_toolchain_release_url="${static_toolchain_base_url}/${static_toolchain_release}"
static_toolchain_inst_dir="${cwsw}/static-toolchain"

# architecture to musl triplet
declare -A static_toolchain_triplet
static_toolchain_triplet["aarch64"]="aarch64-linux-musl"
static_toolchain_triplet["armv6l"]="arm-linux-musleabihf"
static_toolchain_triplet["armv7l"]="arm-linux-musleabihf"
static_toolchain_triplet["armv8l"]="arm-linux-musleabihf"
static_toolchain_triplet["i686"]="i686-linux-musl"
static_toolchain_triplet["x86_64"]="x86_64-linux-musl"

# architecture to release prefix
declare -A static_toolchain_prefix
static_toolchain_prefix["aarch64"]="201802070242"
static_toolchain_prefix["armv6l"]="201802070242"
static_toolchain_prefix["armv7l"]="201802070242"
static_toolchain_prefix["armv8l"]="201802070242"
static_toolchain_prefix["i686"]="201802070242"
static_toolchain_prefix["x86_64"]="201802070242"

# architecture to filename, urls, sha256 file, dir, ...
declare -A static_toolchain_file static_toolchain_checksum static_toolchain_checksum_file static_toolchain_file_url static_toolchain_checksum_url static_toolchain_dir
for supported_arch in ${supported_arches[@]} ; do
  static_toolchain_file[${supported_arch}]="${static_toolchain_prefix[${supported_arch}]}-${static_toolchain_triplet[${supported_arch}]}.${static_toolchain_archive_ext}"
  static_toolchain_checksum_file[${supported_arch}]="${static_toolchain_file[${supported_arch}]}.${static_toolchain_checksum_ext}"
  static_toolchain_file_url[${supported_arch}]="${static_toolchain_release_url}/${static_toolchain_file[${supported_arch}]}"
  static_toolchain_checksum_url[${supported_arch}]="${static_toolchain_release_url}/${static_toolchain_checksum_file[${supported_arch}]}"
  static_toolchain_dir[${supported_arch}]="${static_toolchain_prefix[${supported_arch}]}-${static_toolchain_triplet[${supported_arch}]}"
done

#
# check and make our temporary temporary directory
#
function mktmptmp() {
  if [ ! -e "${tmptmp}" ] ; then
    mkdir -p "${tmptmp}" || cwfailexit "could not create ${tmptmp}"
    chmod "${tmpperm}" "${tmptmp}"
  fi
  test -e "${tmptmp}" || cwfailexit "${tmptmp} still doesn't exist"
}

#
# cwfetch
#   receives:
#     url to download
#     full path to save file to
function cwfetch() {
  local downloadurl="${1}"
  local targetfile="${2}"
  cwscriptecho "downloading ${downloadurl} to ${targetfile}"
  curl ${copts} -o "${targetfile}" "${downloadurl}"
  if [ "${?}" -eq 0 ] ; then
    cwscriptecho "successfully downloaded ${downloadurl} to ${targetfile}"
    return 0
  else
    cwfailexit "curl failed for ${downloadurl}"
    return 1
  fi
}

#
# cwchecksha256sum
#   receives:
#     full path to file to check
#     sha256sum for comparison
function cwchecksha256sum() {
  local checkfile="${1}"
  local storedsha256sum="${2}"
  cwscriptecho "checking sha256sum for ${checkfile}"
  local sha256sum="$(sha256sum ${checkfile} | awk '{print $1}')"
  if [ "${storedsha256sum}" == "${sha256sum}" ] ; then
    cwscriptecho "sha256 checksum succeeded for ${checkfile}"
    return 0
  else
    cwfailexit "sha256 checksum failed for ${checkfile}"
    return 1
  fi
}

#
# bootstrap
#
function bootstrap() {
  # check if we're already bootstrapped and fetch/merge if we are
  cwscriptecho "bootstrapping"
  # make sure we have a tmp directory
  mktmptmp
  # architecture specfic toolchain checksum file
  local statictoolchainchecksumfile="${tmptmp}/${static_toolchain_checksum_file[${uarch}]}"
  cwfetch "${static_toolchain_checksum_url[${uarch}]}" "${statictoolchainchecksumfile}"
  local statictoolchainchecksum="$(awk '{print $1}' ${statictoolchainchecksumfile})"
  # static toolchain
  local statictoolchainarchive="${tmptmp}/${static_toolchain_file[${uarch}]}"
  cwfetch "${static_toolchain_file_url[${uarch}]}" "${statictoolchainarchive}"
  cwchecksha256sum "${statictoolchainarchive}" "${statictoolchainchecksum}"
  # zulu
  local zuluarchive="${tmptmp}/${zulu_jdk_file[${uarch}]}"
  cwfetch "${zulu_jdk_url[${uarch}]}" "${zuluarchive}"
  cwchecksha256sum "${zuluarchive}" "${zulu_jdk_sha256sum[${uarch}]}"
  # jgit
  local jgitsh="${tmptmp}/${jgitsh_file}"
  cwfetch "${jgitsh_url}" "${jgitsh}"
  cwchecksha256sum "${jgitsh}" "${jgitsh_sha256sum}"
}

cwscriptecho "nothing to see here yet"
